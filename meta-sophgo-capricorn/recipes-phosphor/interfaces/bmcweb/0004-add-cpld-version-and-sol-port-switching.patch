From f6cee25af0747b0b2575b36cbaca3bff19e081df Mon Sep 17 00:00:00 2001
From: zhaohui-yan <zhaohui.yan@sophgo.com>
Date: Thu, 15 Aug 2024 11:12:05 +0800
Subject: [PATCH 1/1] add cpld version and sol port switching.

---
 redfish-core/include/redfish.hpp |   1 +
 redfish-core/lib/systems.hpp     | 102 +++++++++++++++++++++++++++++++
 2 files changed, 103 insertions(+)

diff --git a/redfish-core/include/redfish.hpp b/redfish-core/include/redfish.hpp
index e98a04cd..a7b2af9f 100644
--- a/redfish-core/include/redfish.hpp
+++ b/redfish-core/include/redfish.hpp
@@ -168,6 +168,7 @@ class RedfishService
         requestRoutesSystemsCollection(app);
         requestRoutesSystems(app);
         requestRoutesSystemActionsReset(app);
+        requestRoutesSystemActionsChangeSolPort(app);
         requestRoutesSystemResetActionInfo(app);
         requestRoutesBiosService(app);
         requestRoutesBiosReset(app);
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 864a8d96..864a9816 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -2877,6 +2877,107 @@ inline void handleComputerSystemCollectionHead(
         "</redfish/v1/JsonSchemas/ComputerSystem/ComputerSystem.json>; rel=describedby");
 }
 
+
+inline void requestRoutesSystemActionsChangeSolPort(App& app)
+{
+    BMCWEB_ROUTE(app,
+                 "/redfish/v1/Systems/system/Actions/ComputerSystem.ChangeSolPort")
+        .privileges(redfish::privileges::postComputerSystem)
+        .methods(boost::beast::http::verb::post)(
+            [&app](const crow::Request& req,
+                   const std::shared_ptr<bmcweb::AsyncResp>& asyncResp) {
+        if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+        {
+            BMCWEB_LOG_ERROR << " setUpRedfishRoute error " ;
+            return;
+        }
+        std::string solPortType;
+        if (!json_util::readJsonAction(req, asyncResp->res, "SolPortType",
+                                       solPortType))
+        {
+            BMCWEB_LOG_ERROR << " SolPortType error: " ;
+            return;
+        }
+        // Get the command and host vs. chassis
+        std::string command;
+        if (solPortType == "port0")
+        {
+            command = "CPU0UART0";
+        }
+        else if (solPortType == "port1")
+        {
+            command = "CPU0UART1";
+        }
+        else if (solPortType == "port2")
+        {
+            command = "CPU1UART0";
+        }
+        else if (solPortType == "port3")
+        {
+            command = "CPU1UART1";
+        }
+        else
+        {
+            messages::actionParameterUnknown(asyncResp->res, "ChangeSolPort",
+                                             solPortType);
+            return;
+        }
+        crow::connections::systemBus->async_method_call(
+            [asyncResp, solPortType](const boost::system::error_code ec) {
+            if (ec)
+            {
+                BMCWEB_LOG_ERROR << "D-Bus responses error: " << ec;
+                if (ec.value() == boost::asio::error::invalid_argument)
+                {
+                    messages::actionParameterNotSupported(
+                        asyncResp->res, solPortType, "ChangeSolPort");
+                }
+                else
+                {
+                    messages::internalError(asyncResp->res);
+                }
+                return;
+            }
+            messages::success(asyncResp->res);
+            },
+            "xyz.openbmc_project.Gpio",
+            "/xyz/openbmc_project/gpio/soluart",
+            "org.freedesktop.DBus.Properties", "Set",
+            "xyz.openbmc_project.Gpio.SolUart", "SolUartPortTransition",
+            dbus::utility::DbusVariantType{command});
+        });
+}
+
+
+
+
+inline void getCpldVersion(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    sdbusplus::asio::getProperty<std::string>(
+            *crow::connections::systemBus, "xyz.openbmc_project.State.CPLD",
+            "/xyz/openbmc_project/state/cpld/softVersion", "xyz.openbmc_project.State.Cpld.Version",
+            "VERSION",
+            [aResp](const boost::system::error_code ec,
+                    const std::string& cpldVerion) {
+            if (ec)
+            {
+                if (ec == boost::system::errc::host_unreachable)
+                {
+                    // Service not available, no error, just don't return
+                    // host state info
+                    BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                    return;
+                }
+                BMCWEB_LOG_ERROR << "DBUS response error " << ec;
+                messages::internalError(aResp->res);
+                return;
+            }
+
+            aResp->res.jsonValue["CpldInfo"] = cpldVerion;
+        });
+}
+
+
 /**
  * Systems derived class for delivering Computer Systems Schema.
  */
@@ -3007,6 +3108,7 @@ inline void requestRoutesSystems(App& app)
         getIndicatorLedState(asyncResp);
         getComputerSystem(asyncResp, health);
         getHostState(asyncResp);
+        getCpldVersion(asyncResp);
         getBootProperties(asyncResp);
         getBootProgress(asyncResp);
         getBootProgressLastStateTime(asyncResp);
-- 
2.25.1

