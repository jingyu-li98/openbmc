diff --git a/board/aspeed/evb_ast2600/evb_ast2600.c b/board/aspeed/evb_ast2600/evb_ast2600.c
index 72ecb18c15..dec76904ba 100644
--- a/board/aspeed/evb_ast2600/evb_ast2600.c
+++ b/board/aspeed/evb_ast2600/evb_ast2600.c
@@ -4,6 +4,22 @@
  */
 #include <common.h>
 #include <asm/io.h>
+#include <malloc.h>
+#include <errno.h>
+#include <netdev.h>
+#include <asm/io.h>
+#include <console.h>
+#include <linux/compiler.h>
+#include <dm/platform_data/serial_pl01x.h>
+#include <asm/sections.h>
+#include <linux/kernel.h>
+#include <misc.h>
+#include <net.h>
+#include <wdt.h>
+#include <led.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>

 #define SCU_BASE	0x1e6e2000
 #define ESPI_BASE	0x1e6ee000
@@ -131,3 +147,145 @@ int board_early_init_f(void)
 	espi_init();
 	return 0;
 }
+
+enum product_area_filed
+{
+   Manufacturer_Name = 0,
+   Product_Name,
+   Product_Part_Number,
+   Product_Version,
+   Product_serial_Number,
+   Asset_Tag,
+   FRU_Filed_Id,
+   Mac_Addr,
+   Certificate
+};
+
+// eeprom fru info macro definition
+#define EEPROM_SIZE 1024
+#define COMMON_LEN 8
+#define STR_MAC_LEN 17
+#define HEX_MAC_LEN 6
+#define LEN_OFFSET_IN_PRODUCT_AREA 1
+#define LANGUAGE_CODE_OFFSET_IN_PRODUCT_AREA 2
+#define MANUFACTURER_OFFSET_IN_PRODUCT_AREA 3
+#define FILED_LEN_MASK (0xFF >> 2)
+#define FILED_LEN_MAX 64
+#define EEPROM_DEVICE_NAME "eeprom@50"
+
+
+
+
+int string_to_enetaddr(const char *addr, uint8_t *enetaddr)
+{
+	char *end;
+	int i;
+	char value_high = 0,value_low = 0;
+	if (!enetaddr)
+		return;
+	for (i = 0; i < 6; ++i) {
+		if ((addr[i+(2*i)] >= 0x30) && (addr[i+(2*i)] <= 0x39)) {
+			value_high = addr[i+(2*i)] - 0x30;
+		} else if((addr[i+(2*i)] >= 0x61) && (addr[i+(2*i)] <= 0x67)) {
+			value_high = addr[i+(2*i)] - (0x61 - 0xa);
+		} else if((addr[i+(2*i)] >= 0x41) && (addr[i+(2*i)] <= 0x46)) {
+			value_high = addr[i+(2*i)] - (0x41 - 0xa);
+		} else {
+			return -1;
+		}
+
+		if ((addr[i+(2*i) + 1] >= 0x30) && (addr[i+(2*i) + 1] <= 0x39)) {
+			value_low = addr[i+(2*i) + 1] - 0x30;
+		} else if((addr[i+(2*i) + 1] >= 0x61) && (addr[i+(2*i) + 1] <= 0x67)) {
+			value_low = addr[i+(2*i) + 1] - (0x61 - 0xa);
+		} else if((addr[i+(2*i) + 1] >= 0x41) && (addr[i+(2*i) + 1] <= 0x46)) {
+			value_low = addr[i+(2*i) + 1] - (0x41 - 0xa);
+		} else {
+			return -1;
+		}
+		enetaddr[i] = ((value_high << 4) + value_low);
+	}
+
+	return 0;
+}
+
+static int get_mac_from_fru(const char *fruInfo, char *enetaddr)
+{
+	unsigned int  index = 0, mac_addr_index, i;
+    unsigned char mac_addr_len = 0, tmp_filed_len = 0, product_area_len =0;
+
+	product_area_len = fruInfo[COMMON_LEN + LEN_OFFSET_IN_PRODUCT_AREA] * 8;
+	index = COMMON_LEN + MANUFACTURER_OFFSET_IN_PRODUCT_AREA;
+
+	for (i=0; i<Certificate; i++) {
+       if (i == Mac_Addr) {
+          mac_addr_len = (fruInfo[index] & FILED_LEN_MASK);
+          mac_addr_index =  index += sizeof(char);
+		  break;
+       } else {
+          tmp_filed_len = (fruInfo[index] & FILED_LEN_MASK);
+          index += (sizeof(char) + tmp_filed_len);
+       }
+    }
+	if (mac_addr_len == STR_MAC_LEN) {
+		memcpy(enetaddr, (unsigned char *)&fruInfo[mac_addr_index], mac_addr_len);
+	} else {
+		printf("%s: cat not get str mac\n",__func__);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int setup_mac(void)
+{
+	int err, i;
+	uint8_t mac[HEX_MAC_LEN];
+	char eth[STR_MAC_LEN + 1];
+	char eeprom_info[EEPROM_SIZE];
+	struct udevice *eeprom;
+
+	memset(mac, 0x00, sizeof(mac));
+	memset(eth, 0x00, sizeof(eth));
+	memset(eeprom_info, 0x00, sizeof(eeprom_info));
+
+	err = uclass_get_device_by_name(UCLASS_I2C_EEPROM, EEPROM_DEVICE_NAME, &eeprom);
+	if (err) {
+		printf("%s: no eeprom found %d\n", __func__, err);
+		return err;
+	}
+
+	err = misc_read(eeprom, 0, eeprom_info, sizeof(eeprom_info));
+	if (err < 0) {
+		printf("%s: eeprom read error %d\n", __func__, err);
+		return err;
+	}
+
+	err = get_mac_from_fru(eeprom_info, eth);
+	if (err < 0) {
+		return err;
+	}
+
+	err = string_to_enetaddr(eth, mac);
+	if (err < 0) {
+		printf("Invalid MAC address %s\n", eth);
+		return err;
+	}
+
+	if (!is_valid_ethaddr(mac)) {
+		printf("Invalid MAC address %pM\n", mac);
+		return -1;
+	}
+
+	printf("Get mac addr: %s\n", eth);
+
+	if (eth_env_set_enetaddr("ethaddr", mac) == -EEXIST)
+		printf("MAC address has been set before\n");
+
+	return 0;
+}
+int board_late_init(void)
+{
+	setup_mac();
+	return 0;
+}
\ No newline at end of file
