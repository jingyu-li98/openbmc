From 020d01ef42e8ce8ac39df750bbe79a38bf9b63b5 Mon Sep 17 00:00:00 2001
From: zhaohui-yan <zhaohui.yan@sophgo.com>
Date: Wed, 14 Aug 2024 11:46:32 +0800
Subject: [PATCH 1/1] fixed IndicatorLed management bug.

---
 redfish-core/lib/led.hpp | 108 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 107 insertions(+), 1 deletion(-)

diff --git a/redfish-core/lib/led.hpp b/redfish-core/lib/led.hpp
index 4c4c513a..b3eaa707 100644
--- a/redfish-core/lib/led.hpp
+++ b/redfish-core/lib/led.hpp
@@ -36,6 +36,7 @@ inline void
     getIndicatorLedState(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
 {
     BMCWEB_LOG_DEBUG << "Get led groups";
+#if 0
     sdbusplus::asio::getProperty<bool>(
         *crow::connections::systemBus, "xyz.openbmc_project.LED.GroupManager",
         "/xyz/openbmc_project/led/groups/enclosure_identify_blink",
@@ -87,6 +88,36 @@ inline void
             }
             });
         });
+#else
+    sdbusplus::asio::getProperty<bool>(
+        *crow::connections::systemBus, "xyz.openbmc_project.Gpio",
+        "/xyz/openbmc_project/gpio/identifyLed",
+        "xyz.openbmc_project.Gpio.identifyLed", "identifyLedState",
+        [aResp](const boost::system::error_code ec, const bool state) {
+            if (ec == boost::system::errc::invalid_argument)
+            {
+                BMCWEB_LOG_DEBUG
+                    << "Get enclosure identity led failed, missmatch in property type";
+                messages::internalError(aResp->res);
+                return;
+            }
+
+            if (ec)
+            {
+                return;
+            }
+
+            if (state)
+            {
+                aResp->res.jsonValue["IndicatorLED"] = "Lit";
+            }
+            else
+            {
+                aResp->res.jsonValue["IndicatorLED"] = "Off";
+            }
+        });
+
+#endif
 }
 
 /**
@@ -103,6 +134,8 @@ inline void
                          const std::string& ledState)
 {
     BMCWEB_LOG_DEBUG << "Set led groups";
+
+#if 0
     bool ledOn = false;
     bool ledBlinkng = false;
 
@@ -153,6 +186,36 @@ inline void
         "org.freedesktop.DBus.Properties", "Set",
         "xyz.openbmc_project.Led.Group", "Asserted",
         dbus::utility::DbusVariantType(ledBlinkng));
+#else
+    bool ledOn = false;
+    if((ledState == "Lit") || (ledState == "Blinking"))
+    {
+        ledOn = true;
+    }
+    else if (ledState != "Off")
+    {
+        messages::propertyValueNotInList(aResp->res, ledState, "IndicatorLED");
+        return;
+    }
+
+    crow::connections::systemBus->async_method_call(
+            [aResp](const boost::system::error_code ec2) {
+            if (ec2)
+            {
+                BMCWEB_LOG_DEBUG << "DBUS response error " << ec2;
+                messages::internalError(aResp->res);
+                return;
+            }
+            messages::success(aResp->res);
+            },
+            "xyz.openbmc_project.Gpio",
+            "/xyz/openbmc_project/gpio/identifyLed",
+            // "xyz.openbmc_project.Gpio.identifyLed",
+            // "identifyLedSwitch");
+            "org.freedesktop.DBus.Properties","Set",
+            "xyz.openbmc_project.Gpio.identifyLed", "identifyLedSwitch",
+            dbus::utility::DbusVariantType(ledOn));
+#endif
 }
 
 /**
@@ -166,6 +229,7 @@ inline void
     getLocationIndicatorActive(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
 {
     BMCWEB_LOG_DEBUG << "Get LocationIndicatorActive";
+#if 0
     sdbusplus::asio::getProperty<bool>(
         *crow::connections::systemBus, "xyz.openbmc_project.LED.GroupManager",
         "/xyz/openbmc_project/led/groups/enclosure_identify_blink",
@@ -210,6 +274,29 @@ inline void
             aResp->res.jsonValue["LocationIndicatorActive"] = ledOn;
             });
         });
+#else
+
+    sdbusplus::asio::getProperty<bool>(
+        *crow::connections::systemBus, "xyz.openbmc_project.Gpio",
+        "/xyz/openbmc_project/gpio/identifyLed",
+        "xyz.openbmc_project.Gpio.identifyLed", "identifyLedState",
+        [aResp](const boost::system::error_code ec, const bool state) {
+            if (ec == boost::system::errc::invalid_argument)
+            {
+                BMCWEB_LOG_DEBUG
+                    << "Get enclosure identity led failed, missmatch in property type";
+                messages::internalError(aResp->res);
+                return;
+            }
+
+            if (ec)
+            {
+                return;
+            }
+
+            aResp->res.jsonValue["LocationIndicatorActive"] = state;
+        });
+#endif
 }
 
 /**
@@ -225,7 +312,7 @@ inline void
                                const bool ledState)
 {
     BMCWEB_LOG_DEBUG << "Set LocationIndicatorActive";
-
+#if 0
     crow::connections::systemBus->async_method_call(
         [aResp, ledState](const boost::system::error_code ec) mutable {
         if (ec)
@@ -254,5 +341,24 @@ inline void
         "org.freedesktop.DBus.Properties", "Set",
         "xyz.openbmc_project.Led.Group", "Asserted",
         dbus::utility::DbusVariantType(ledState));
+#else
+    crow::connections::systemBus->async_method_call(
+            [aResp](const boost::system::error_code ec2) {
+            if (ec2)
+            {
+                BMCWEB_LOG_DEBUG << "DBUS response error " << ec2;
+                messages::internalError(aResp->res);
+                return;
+            }
+            messages::success(aResp->res);
+            },
+            "xyz.openbmc_project.Gpio",
+            "/xyz/openbmc_project/gpio/identifyLed",
+            // "xyz.openbmc_project.Gpio.identifyLed",
+            // "identifyLedSwitch");
+            "org.freedesktop.DBus.Properties","Set",
+            "xyz.openbmc_project.Gpio.identifyLed", "identifyLedSwitch",
+            dbus::utility::DbusVariantType(ledState));
+#endif
 }
 } // namespace redfish
-- 
2.25.1

