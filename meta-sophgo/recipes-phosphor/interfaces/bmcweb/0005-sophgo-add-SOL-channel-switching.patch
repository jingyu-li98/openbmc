From 6a2154ecef50bfe13c4c34b7ff0efa6d4dd7bc67 Mon Sep 17 00:00:00 2001
From: zhaohui-yan <zhaohui.yan@sophgo.com>
Date: Wed, 14 Aug 2024 11:39:39 +0800
Subject: [PATCH 1/1] Add SOL channel switching.

---
 redfish-core/include/redfish.hpp |   1 +
 redfish-core/lib/systems.hpp     | 316 ++++++++++++++-----------------
 2 files changed, 141 insertions(+), 176 deletions(-)

diff --git a/redfish-core/include/redfish.hpp b/redfish-core/include/redfish.hpp
index e98a04cd..a7b2af9f 100644
--- a/redfish-core/include/redfish.hpp
+++ b/redfish-core/include/redfish.hpp
@@ -168,6 +168,7 @@ class RedfishService
         requestRoutesSystemsCollection(app);
         requestRoutesSystems(app);
         requestRoutesSystemActionsReset(app);
+        requestRoutesSystemActionsChangeSolPort(app);
         requestRoutesSystemResetActionInfo(app);
         requestRoutesBiosService(app);
         requestRoutesBiosReset(app);
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 0a8c850d..a752420a 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -604,192 +604,76 @@ inline void getHostState(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
         }
         });
 }
-
-inline void getCpldCpuaInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+inline void getExistState(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
+                           std::string header1,
+                           std::string header2,
+                           int number)
 {
-    BMCWEB_LOG_DEBUG << "Get cpld cpua information.";
-    sdbusplus::asio::getProperty<std::string>(
-        *crow::connections::systemBus, "xyz.openbmc_project.State.Host",
-        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Host",
-        "CurrentCPUAPWState",
-        [aResp](const boost::system::error_code ec,
-                const std::string& hostState) {
-        if (ec)
-        {
-            if (ec == boost::system::errc::host_unreachable)
-            {
-                // Service not available, no error, just don't return
-                // host state info
-                BMCWEB_LOG_DEBUG << "Service not available " << ec;
-                return;
-            }
-            BMCWEB_LOG_ERROR << "DBUS response error " << ec;
-            messages::internalError(aResp->res);
-            return;
-        }
-
-        BMCWEB_LOG_DEBUG << "Cpua PW state: " << hostState;
+    std::string property;
+    std::string name;
+    std::string jsonIndex;
+    std::string dbusName;
+    std::string dbusPath;
+    std::string dbusIntf;
+    int index;
+    for(index=1; index<(number+1); index++)
+    {
+        name      = header1 + std::to_string(static_cast<int>(index));
+        property  = name + "ExistState";
+        jsonIndex = header2 + std::to_string(static_cast<int>(index)) + "Info";
+        dbusName  = "xyz.openbmc_project.Gpio";
+        dbusPath  = "/xyz/openbmc_project/gpio/" + header1;
+        dbusIntf  = "xyz.openbmc_project.Gpio." + header2;
+
+        BMCWEB_LOG_DEBUG << "Get state." << name;
 
-       std::cout << "Cpua PW state:" << hostState <<std:: endl;
-
-        aResp->res.jsonValue["CpuaPWInfo"] = hostState;
-        });
-}
-inline void getCpldCpubInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
-{
-    BMCWEB_LOG_DEBUG << "Get cpld cpub information.";
-    sdbusplus::asio::getProperty<std::string>(
-        *crow::connections::systemBus, "xyz.openbmc_project.State.Host",
-        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Host",
-        "CurrentCPUBPWState",
-        [aResp](const boost::system::error_code ec,
-                const std::string& hostState) {
-        if (ec)
-        {
-            if (ec == boost::system::errc::host_unreachable)
+        sdbusplus::asio::getProperty<bool>(
+            *crow::connections::systemBus, dbusName,
+            dbusPath, dbusIntf,
+            property,
+            [aResp, jsonIndex, name](const boost::system::error_code ec,
+                    const bool& existState) {
+            if (ec)
             {
-                // Service not available, no error, just don't return
-                // host state info
-                BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                if (ec == boost::system::errc::host_unreachable)
+                {
+                    // Service not available, no error, just don't return
+                    // host state info
+                    BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                    return;
+                }
+                BMCWEB_LOG_ERROR << "DBUS response error " << ec;
+                messages::internalError(aResp->res);
                 return;
             }
-            BMCWEB_LOG_ERROR << "DBUS response error " << ec;
-            messages::internalError(aResp->res);
-            return;
-        }
-
-        BMCWEB_LOG_DEBUG << "Cpub PW state: " << hostState;
-
-       std::cout << "Cpub PW state:" << hostState <<std:: endl;
-
-        aResp->res.jsonValue["CpubPWInfo"] = hostState;
-        });
-}
-inline void getCpldCpuoInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
-{
-    BMCWEB_LOG_DEBUG << "Get cpld  cpuo information.";
-    sdbusplus::asio::getProperty<std::string>(
-        *crow::connections::systemBus, "xyz.openbmc_project.State.Host",
-        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Host",
-        "CurrentCPUOtherPWState",
-        [aResp](const boost::system::error_code ec,
-                const std::string& hostState) {
-        if (ec)
-        {
-            if (ec == boost::system::errc::host_unreachable)
+            // std::cout << name << "state:" << existState << "jsonIndex:" << jsonIndex << std:: endl;
+            if(existState == true)
             {
-                // Service not available, no error, just don't return
-                // host state info
-                BMCWEB_LOG_DEBUG << "Service not available " << ec;
-                return;
+                aResp->res.jsonValue[jsonIndex] = "Exist";
             }
-            BMCWEB_LOG_ERROR << "DBUS response error " << ec;
-            messages::internalError(aResp->res);
-            return;
-        }
-
-        BMCWEB_LOG_DEBUG << "Cpuo PW state: " << hostState;
-
-       std::cout << "Cpuo PW state:" << hostState <<std:: endl;
-
-        aResp->res.jsonValue["CpuoPWInfo"] = hostState;
-        });
-}
-inline void getCpldOtherPwInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
-{
-    BMCWEB_LOG_DEBUG << "Get cpld otherPw information.";
-    sdbusplus::asio::getProperty<std::string>(
-        *crow::connections::systemBus, "xyz.openbmc_project.State.Host",
-        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Host",
-        "CurrentOtherPWState",
-        [aResp](const boost::system::error_code ec,
-                const std::string& hostState) {
-        if (ec)
-        {
-            if (ec == boost::system::errc::host_unreachable)
+            else
             {
-                // Service not available, no error, just don't return
-                // host state info
-                BMCWEB_LOG_DEBUG << "Service not available " << ec;
-                return;
+                aResp->res.jsonValue[jsonIndex] = "Absent";
             }
-            BMCWEB_LOG_ERROR << "DBUS response error " << ec;
-            messages::internalError(aResp->res);
-            return;
-        }
-
-        BMCWEB_LOG_DEBUG << "other PW state: " << hostState;
-
-       std::cout << "other PW state:" << hostState <<std:: endl;
-
-        aResp->res.jsonValue["OtherPWInfo"] = hostState;
         });
-}
-inline void getCpldPsuInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
-{
-    BMCWEB_LOG_DEBUG << "Get cpld psu information.";
-    sdbusplus::asio::getProperty<std::string>(
-        *crow::connections::systemBus, "xyz.openbmc_project.State.Host",
-        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Host",
-        "CurrentPSUState",
-        [aResp](const boost::system::error_code ec,
-                const std::string& hostState) {
-        if (ec)
-        {
-            if (ec == boost::system::errc::host_unreachable)
-            {
-                // Service not available, no error, just don't return
-                // host state info
-                BMCWEB_LOG_DEBUG << "Service not available " << ec;
-                return;
-            }
-            BMCWEB_LOG_ERROR << "DBUS response error " << ec;
-            messages::internalError(aResp->res);
-            return;
-        }
-
-        BMCWEB_LOG_DEBUG << "psu PW state: " << hostState;
-
-       std::cout << "psu PW state:" << hostState <<std:: endl;
+    }
 
-        aResp->res.jsonValue["PsuInfo"] = hostState;
-        });
 }
-inline void getCpldEfuseInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
-{
-    BMCWEB_LOG_DEBUG << "Get cpld efuse information.";
-    sdbusplus::asio::getProperty<std::string>(
-        *crow::connections::systemBus, "xyz.openbmc_project.State.Host",
-        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Host",
-        "CurrentEFUState",
-        [aResp](const boost::system::error_code ec,
-                const std::string& hostState) {
-        if (ec)
-        {
-            if (ec == boost::system::errc::host_unreachable)
-            {
-                // Service not available, no error, just don't return
-                // host state info
-                BMCWEB_LOG_DEBUG << "Service not available " << ec;
-                return;
-            }
-            BMCWEB_LOG_ERROR << "DBUS response error " << ec;
-            messages::internalError(aResp->res);
-            return;
-        }
 
-        BMCWEB_LOG_DEBUG << "efuse PW state: " << hostState;
-
-       std::cout << "efuse PW state:" << hostState <<std:: endl;
-
-        aResp->res.jsonValue["EfusInfo"] = hostState;
-        });
+inline void getSataExistState(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    getExistState(aResp, "sata", "Sata", 2);
 }
 
+inline void getFanExistState(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    getExistState(aResp, "fan", "Fan", 9);
+}
 
-
-
-
+inline void getHddExistState(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    getExistState(aResp, "hdd", "Hdd", 4);
+}
 
 
 
@@ -2922,6 +2806,7 @@ inline void doNMI(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
         serviceName, objectPath, interfaceName, method);
 }
 
+
 /**
  * SystemActionsReset class supports handle POST method for Reset action.
  * The class retrieves and sends data directly to D-Bus.
@@ -3051,6 +2936,88 @@ inline void requestRoutesSystemActionsReset(App& app)
         });
 }
 
+
+
+
+
+inline void requestRoutesSystemActionsChangeSolPort(App& app)
+{
+    BMCWEB_ROUTE(app,
+                 "/redfish/v1/Systems/system/Actions/ComputerSystem.ChangeSolPort")
+        .privileges(redfish::privileges::postComputerSystem)
+        .methods(boost::beast::http::verb::post)(
+            [&app](const crow::Request& req,
+                   const std::shared_ptr<bmcweb::AsyncResp>& asyncResp) {
+        if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+        {
+            BMCWEB_LOG_ERROR << " setUpRedfishRoute error " ;
+            return;
+        }
+        std::string solPortType;
+        if (!json_util::readJsonAction(req, asyncResp->res, "SolPortType",
+                                       solPortType))
+        {
+            BMCWEB_LOG_ERROR << " SolPortType error: " ;
+            return;
+        }
+
+        // Get the command and host vs. chassis
+        std::string command;
+        if (solPortType == "port0")
+        {
+            command = "CPU0UART0";
+        }
+        else if (solPortType == "port1")
+        {
+            command = "CPU0UART1";
+        }
+        else if (solPortType == "port2")
+        {
+            command = "CPU1UART0";
+        }
+        else if (solPortType == "port3")
+        {
+            command = "CPU1UART1";
+        }
+        else
+        {
+            messages::actionParameterUnknown(asyncResp->res, "ChangeSolPort",
+                                             solPortType);
+            return;
+        }
+
+
+        crow::connections::systemBus->async_method_call(
+            [asyncResp, solPortType](const boost::system::error_code ec) {
+            if (ec)
+            {
+                BMCWEB_LOG_ERROR << "D-Bus responses error: " << ec;
+                if (ec.value() == boost::asio::error::invalid_argument)
+                {
+                    messages::actionParameterNotSupported(
+                        asyncResp->res, solPortType, "ChangeSolPort");
+                }
+                else
+                {
+                    messages::internalError(asyncResp->res);
+                }
+                return;
+            }
+            messages::success(asyncResp->res);
+            },
+            "xyz.openbmc_project.Gpio",
+            "/xyz/openbmc_project/gpio/soluart",
+            "org.freedesktop.DBus.Properties", "Set",
+            "xyz.openbmc_project.Gpio.SolUart", "SolUartPortTransition",
+            dbus::utility::DbusVariantType{command});
+        });
+}
+
+
+
+
+
+
 inline void handleComputerSystemCollectionHead(
     App& app, const crow::Request& req,
     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
@@ -3195,12 +3162,9 @@ inline void requestRoutesSystems(App& app)
         getIndicatorLedState(asyncResp);
         getComputerSystem(asyncResp, health);
         getHostState(asyncResp);
-        getCpldCpuaInfo(asyncResp);
-        getCpldCpubInfo(asyncResp);
-        getCpldCpuoInfo(asyncResp);
-        getCpldOtherPwInfo(asyncResp);
-        getCpldPsuInfo(asyncResp);
-        getCpldEfuseInfo(asyncResp);
+        getSataExistState(asyncResp);
+        getFanExistState(asyncResp);
+        getHddExistState(asyncResp);
         getBootProperties(asyncResp);
         getBootProgress(asyncResp);
         getBootProgressLastStateTime(asyncResp);
-- 
2.25.1

