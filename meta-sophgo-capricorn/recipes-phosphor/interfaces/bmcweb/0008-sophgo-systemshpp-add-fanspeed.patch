diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 864a9816..b4d3018c 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -28,7 +28,7 @@
 #include "utils/json_utils.hpp"
 #include "utils/sw_utils.hpp"
 #include "utils/time_utils.hpp"
-
+#include <sdbusplus/server.hpp>
 #include <boost/container/flat_map.hpp>
 #include <boost/system/error_code.hpp>
 #include <sdbusplus/asio/property.hpp>
@@ -38,6 +38,9 @@
 #include <string_view>
 #include <variant>
 
+#include <cstdio>
+#include <cstdlib>
+
 namespace redfish
 {
 
@@ -1836,6 +1839,48 @@ inline void
         dbus::utility::DbusVariantType(powerRestorPolicy));
 }
 
+inline void getFanSpeed(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    {
+        BMCWEB_LOG_DEBUG << "Get fan speed control mode";
+
+        sdbusplus::asio::getProperty<std::string>(
+            *crow::connections::systemBus, "xyz.openbmc_project.FanControl",
+            "/xyz/openbmc_project/sophgo/fanControl",
+            "xyz.openbmc_project.Sophgo.FanControl", "ControlMode",
+            [aResp](const boost::system::error_code ec, const std::string& mode) {
+                if (ec)
+                {
+                    BMCWEB_LOG_DEBUG << "DBUS response error " << ec;
+                    return;
+                }
+
+                aResp->res.jsonValue["FanSpeed"] = mode;
+            });
+    }
+
+}
+
+inline void setFanSpeed(const std::shared_ptr<bmcweb::AsyncResp>& aResp, const std::string& fanSpeed)
+{
+    crow::connections::systemBus->async_method_call(
+        [aResp](const boost::system::error_code ec) {
+        if (ec)
+        {
+            messages::internalError(aResp->res);
+            return;
+        }
+        },
+        "xyz.openbmc_project.FanControl",
+        "/xyz/openbmc_project/sophgo/fanControl",
+        "org.freedesktop.DBus.Properties", "Set",
+        "xyz.openbmc_project.Sophgo.FanControl", "ControlMode",
+        dbus::utility::DbusVariantType(fanSpeed));
+}
+
+
+
+
 #ifdef BMCWEB_ENABLE_REDFISH_PROVISIONING_FEATURE
 /**
  * @brief Retrieves provisioning status
@@ -3115,6 +3160,7 @@ inline void requestRoutesSystems(App& app)
         getPCIeDeviceList(asyncResp, "PCIeDevices");
         getHostWatchdogTimer(asyncResp);
         getPowerRestorePolicy(asyncResp);
+        getFanSpeed(asyncResp);
         getAutomaticRetry(asyncResp);
         getLastResetTime(asyncResp);
 #ifdef BMCWEB_ENABLE_REDFISH_PROVISIONING_FEATURE
@@ -3150,6 +3196,7 @@ inline void requestRoutesSystems(App& app)
         std::optional<std::string> indicatorLed;
         std::optional<std::string> assetTag;
         std::optional<std::string> powerRestorePolicy;
+        std::optional<std::string> fanSpeed;
         std::optional<std::string> powerMode;
         std::optional<bool> wdtEnable;
         std::optional<std::string> wdtTimeOutAction;
@@ -3171,6 +3218,7 @@ inline void requestRoutesSystems(App& app)
                         "LocationIndicatorActive", locationIndicatorActive,
                         "AssetTag", assetTag,
                         "PowerRestorePolicy", powerRestorePolicy,
+                        "FanSpeed", fanSpeed,
                         "PowerMode", powerMode,
                         "HostWatchdogTimer/FunctionEnabled", wdtEnable,
                         "HostWatchdogTimer/TimeoutAction", wdtTimeOutAction,
@@ -3236,6 +3284,11 @@ inline void requestRoutesSystems(App& app)
             setPowerRestorePolicy(asyncResp, *powerRestorePolicy);
         }
 
+        if (fanSpeed)
+        {
+            setFanSpeed(asyncResp, *fanSpeed);
+        }
+
         if (powerMode)
         {
             setPowerMode(asyncResp, *powerMode);
