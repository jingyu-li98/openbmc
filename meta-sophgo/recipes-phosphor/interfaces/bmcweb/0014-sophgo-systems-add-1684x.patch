diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 71e9179a..66a84e7c 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -705,6 +705,62 @@ inline void getCpldVersion(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
         });
 }
 
+inline void getSg1684xInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    sdbusplus::asio::getProperty<double>(
+            *crow::connections::systemBus, "xyz.openbmc_project.FanControl",
+            "/xyz/openbmc_project/sensors/temperature/AiCard_Temp", "xyz.openbmc_project.Sensor.Value",
+            "Value",
+            [aResp](const boost::system::error_code ec,
+                    const double& tmpValue) {
+            if (ec)
+            {
+                if (ec == boost::system::errc::host_unreachable)
+                {
+                    // Service not available, no error, just don't return
+                    // host state info
+                    BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                    return;
+                }
+                BMCWEB_LOG_ERROR << "DBUS response error " << ec;
+                messages::internalError(aResp->res);
+                return;
+            }
+
+            aResp->res.jsonValue["sg1684xTmpInfo"] = tmpValue;
+        });
+    sdbusplus::asio::getProperty<int>(
+            *crow::connections::systemBus, "xyz.openbmc_project.FanControl",
+            "/xyz/openbmc_project/sensors/temperature/AiCard_Temp", "xyz.openbmc_project.Sensor.Value",
+            "sg1684xExistState",
+            [aResp](const boost::system::error_code ec,
+                    const int& isExist) {
+            if (ec)
+            {
+                if (ec == boost::system::errc::host_unreachable)
+                {
+                    // Service not available, no error, just don't return
+                    // host state info
+                    BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                    return;
+                }
+                BMCWEB_LOG_ERROR << "DBUS response error " << ec;
+                std::cout << "sg1684xExistState get error " << std::endl;
+                messages::internalError(aResp->res);
+                return;
+            }
+            if (isExist)
+            {
+                aResp->res.jsonValue["sg1684xInfo"] = "Exist";
+            } else {
+                aResp->res.jsonValue["sg1684xInfo"] = "absent";
+            }
+
+        });
+}
+
+
+
 /**
  * @brief Translates boot source DBUS property value to redfish.
  *
@@ -3239,6 +3295,7 @@ inline void requestRoutesSystems(App& app)
         getFanExistState(asyncResp);
         getHddExistState(asyncResp);
         getCpldVersion(asyncResp);
+        getSg1684xInfo(asyncResp);
         getBootProperties(asyncResp);
         getBootProgress(asyncResp);
         getBootProgressLastStateTime(asyncResp);
