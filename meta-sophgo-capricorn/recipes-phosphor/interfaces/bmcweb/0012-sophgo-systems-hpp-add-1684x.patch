diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 2d2e6748..483634c3 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -3023,6 +3023,61 @@ inline void getCpldVersion(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
 }
 
 
+inline void getSg1684xInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+ {
+     sdbusplus::asio::getProperty<double>(
+             *crow::connections::systemBus, "xyz.openbmc_project.FanControl",
+             "/xyz/openbmc_project/sensors/temperature/AiCard_Temp", "xyz.openbmc_project.Sensor.Value",
+             "Value",
+             [aResp](const boost::system::error_code ec,
+                     const double& tmpValue) {
+             if (ec)
+             {
+                 if (ec == boost::system::errc::host_unreachable)
+                 {
+                     // Service not available, no error, just don't return
+                     // host state info
+                     BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                     return;
+                 }
+                 BMCWEB_LOG_ERROR << "DBUS response error " << ec;
+                 messages::internalError(aResp->res);
+                 return;
+             }
+
+             aResp->res.jsonValue["sg1684xTmpInfo"] = tmpValue;
+         });
+     sdbusplus::asio::getProperty<int>(
+             *crow::connections::systemBus, "xyz.openbmc_project.FanControl",
+             "/xyz/openbmc_project/sensors/temperature/AiCard_Temp", "xyz.openbmc_project.Sensor.Value",
+             "sg1684xExistState",
+             [aResp](const boost::system::error_code ec,
+                     const int& isExist) {
+             if (ec)
+             {
+                 if (ec == boost::system::errc::host_unreachable)
+                 {
+                     // Service not available, no error, just don't return
+                     // host state info
+                     BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                     return;
+                 }
+                 BMCWEB_LOG_ERROR << "DBUS response error " << ec;
+                 std::cout << "sg1684xExistState get error " << std::endl;
+                 messages::internalError(aResp->res);
+                 return;
+             }
+             if (isExist)
+             {
+                 aResp->res.jsonValue["sg1684xInfo"] = "Exist";
+             } else {
+                 aResp->res.jsonValue["sg1684xInfo"] = "absent";
+             }
+
+         });
+ }
+
+
 /**
  * Systems derived class for delivering Computer Systems Schema.
  */
@@ -3154,6 +3209,7 @@ inline void requestRoutesSystems(App& app)
         getComputerSystem(asyncResp, health);
         getHostState(asyncResp);
         getCpldVersion(asyncResp);
+        getSg1684xInfo(asyncResp);
         getBootProperties(asyncResp);
         getBootProgress(asyncResp);
         getBootProgressLastStateTime(asyncResp);
